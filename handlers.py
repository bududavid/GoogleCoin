import logging
import random
import sqlite3
import re
import aiohttp
import math
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, ContentType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from unidecode import unidecode
from DATA import (
    french_first_names, french_last_names, russian_first_names,
    russian_last_names, english_first_names, english_last_names,
    API_TOKEN, CHECK_CHAT_ID, CHECK_CHAT_ID_HELP, MIN_FOR_CONCLUSION, ACCRUAL, currencies,
    REFERRAL_BONUS, WITHDRAWAL_PERCENTAGE, DAY_HOLD
)
from keyboards import keyboard, withdraw_keyboard, withdraw_keyboard, currency_keyboard, help_keyboard
from states import (
    WithdrawState, HelpComplaintState, AdminReplyState, CheckAccountStates, NameSurname
) 
from database import cursor, conn, cursor2, conn2


logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


async def get_exchange_rate(from_currency, to_currency):
    url = f"https://api.exchangerate-api.com/v4/latest/{from_currency}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()
            return data['rates'].get(to_currency, 1)

def is_valid_payeer_wallet(wallet):
    return re.match(r'^P[0-9]{3,16}$', wallet) is not None


def register_handlers(dp: Dispatcher):
    dp.message.register(send_welcome, Command("start"))
    dp.message.register(help_complaint, F.text == '‚ùì –ü–æ–º–æ—â—å/–ñ–∞–ª–æ–±—ã')
    dp.message.register(help_quesions, F.text == '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã')
    dp.message.register(help_write, F.text == '‚úç –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
    dp.message.register(send_credentials, F.text == 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å')
    dp.message.register(referral_link, F.text == 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã')
    dp.message.register(show_accounts, F.text == 'üìú –ê–∫–∫–∞—É–Ω—Ç—ã')
    dp.message.register(show_balance, F.text == 'üíµ –ë–∞–ª–∞–Ω—Å')
    dp.message.register(select_currency, F.text == 'üåê –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã')
    dp.message.register(set_currency, lambda message: message.text in currencies)
    dp.message.register(withdraw_request, F.text == 'üí∏ –í—ã–≤–µ—Å—Ç–∏')
    dp.message.register(back_to_main_menu, F.text == 'üîô –ù–∞–∑–∞–¥')
    dp.message.register(select_payeer, F.text == 'üÖøÔ∏è Payeer')
    dp.message.register(process_withdraw_amount, WithdrawState.awaiting_withdraw_amount)
    dp.message.register(process_wallet_number, WithdrawState.awaiting_wallet_number)
    dp.message.register(send_admin_reply, AdminReplyState.awaiting_reply)
    dp.message.register(help_complaint, Command(commands=['help_complaint']))
    dp.message.register(receive_help_complaint, HelpComplaintState.awaiting_message)
    dp.message.register(receive_image, HelpComplaintState.awaiting_image)
    dp.message.register(skip_image, Command("skip"))
    dp.message.register(ask_admin_for_reply, lambda c: c.data and c.data.startswith('reply|'))

    dp.callback_query.register(process_check, lambda c: c.data and c.data.startswith('check'))
    dp.callback_query.register(process_result, lambda c: c.data and c.data.startswith('result'))
    dp.callback_query.register(process_withdraw_done, lambda c: c.data and c.data.startswith('withdraw_done'))
    dp.callback_query.register(process_withdraw_failed, lambda c: c.data and c.data.startswith('withdraw_failed'))
    dp.callback_query.register(process_confirm_creation, lambda c: c.data in ["confirm_creation_yes", "confirm_creation_no"])
    dp.callback_query.register(process_confirm_phone_removal, lambda c: c.data in ["confirm_phone_removal_yes", "confirm_phone_removal_no"])
    dp.callback_query.register(process_confirm_backup_email_removal, lambda c: c.data in ["confirm_backup_email_removal_yes", "confirm_backup_email_removal_no"])
    dp.callback_query.register(process_reply, lambda c: c.data and c.data.startswith('reply'))
    dp.callback_query.register(process_cancel_registration, lambda c: c.data and c.data.startswith('cancel|'))

    



@dp.callback_query(lambda c: c.data and c.data.startswith('check'))
async def process_check(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = callback_query.data.split('|')
        temp_id = int(data[1])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º temp_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(temp_id=temp_id)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É
        await callback_query.message.answer("–í—ã —Ç–æ—á–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç?", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="confirm_creation_yes"), InlineKeyboardButton(text="–ù–µ—Ç", callback_data="confirm_creation_no")]
        ]))
        await state.set_state(CheckAccountStates.confirm_creation)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@dp.callback_query(lambda c: c.data in ["confirm_creation_yes", "confirm_creation_no"])
async def process_confirm_creation(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "confirm_creation_yes":
        await callback_query.message.answer("–í—ã —Ç–æ—á–Ω–æ —É–¥–∞–ª–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞? –ï—Å–ª–∏ –Ω–µ—Ç —É–¥–∞–ª–∏—Ç–µ, –∏–Ω–∞—á–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="confirm_phone_removal_yes"), InlineKeyboardButton(text="–ù–µ—Ç", callback_data="confirm_phone_removal_no")]
        ]))
        await state.set_state(CheckAccountStates.confirm_phone_removal)
    else:
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π –∞–∫–∫–∞—É–Ω—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        for i in range(1):
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id - i)
        await state.clear()

@dp.callback_query(lambda c: c.data in ["confirm_phone_removal_yes", "confirm_phone_removal_no"])
async def process_confirm_phone_removal(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "confirm_phone_removal_yes":
        await callback_query.message.answer("–í—ã —Ç–æ—á–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ø–æ—á—Ç—É? –ï—Å–ª–∏ –Ω–µ—Ç —É–¥–∞–ª–∏—Ç–µ, –∏–Ω–∞—á–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="confirm_backup_email_removal_yes"), InlineKeyboardButton(text="–ù–µ—Ç", callback_data="confirm_backup_email_removal_no")]
        ]))
        await state.set_state(CheckAccountStates.confirm_backup_email_removal)
    else:
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        for i in range(2):
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id - i)
        await state.clear()

@dp.callback_query(lambda c: c.data in ["confirm_backup_email_removal_yes", "confirm_backup_email_removal_no"])
async def process_confirm_backup_email_removal(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "confirm_backup_email_removal_yes":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
        data = await state.get_data()
        temp_id = data.get('temp_id')
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
        cursor.execute('SELECT login, password FROM temp_check WHERE id = ?', (temp_id,))
        temp_data = cursor.fetchone()
        try:
            for i in range(4):
                await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id - i)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        
        if temp_data:
            login, password = temp_data 
            user = await bot.get_chat(callback_query.from_user.id)
            inline_kb_check = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–†–∞–±–æ—á–∏–π", callback_data=f"result|{temp_id}|working"), 
                 InlineKeyboardButton(text="–ù–µ —Ä–∞–±–æ—á–∏–π", callback_data=f"result|{temp_id}|not_working")]
            ])
            
            # –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ hold –±–∞–ª–∞–Ω—Å
            cursor.execute('INSERT OR IGNORE INTO balances (user_id, balance, hold_balance) VALUES (?, 0, 0)', (callback_query.from_user.id,))
            cursor.execute(f'UPDATE balances SET hold_balance = hold_balance + {ACCRUAL} WHERE user_id = ?', (callback_query.from_user.id,))
            conn.commit()

            print(f"{user.full_name} - –°–æ–∑–¥–∞–ª –∞–∫–∫–∞—É–Ω—Ç")
            
            await callback_query.answer()
            await bot.send_message(CHECK_CHAT_ID, f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è:\n–õ–æ–≥–∏–Ω: {login}\n–ü–∞—Ä–æ–ª—å: {password}", reply_markup=inline_kb_check)
            await callback_query.message.answer(
                f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n\n"
                f"üíµ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –≤–∞—à —Ö–æ–ª–¥-–±–∞–ª–∞–Ω—Å –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ: {ACCRUAL}$.\n"
                f"‚è≥ –ê–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ö–æ–ª–¥–µ: {DAY_HOLD} –¥–Ω–µ–π, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ: {ACCRUAL}$.\n\n"
                f"üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"
            )
        else:
            await callback_query.message.answer("–û—à–∏–±–∫–∞: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        
        await state.clear()
    else:
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ø–æ—á—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        for i in range(3):
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id - i)
        await state.clear()

@dp.callback_query(lambda c: c.data and c.data.startswith('reply'))
async def process_reply(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = callback_query.data.split('|')
        user_id = int(data[1])

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await state.update_data(reply_to_user_id=user_id)

        await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
        await state.set_state(AdminReplyState.awaiting_reply)
        await callback_query.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    cursor2.execute("PRAGMA table_info(accounts);")
    columns = cursor.fetchall()
    print(columns)
    cursor.execute("ALTER TABLE accounts ADD COLUMN is_channel TEXT;")
    conn.commit()
    cursor2.execute("PRAGMA table_info(accounts);")
    columns = cursor.fetchall()
    print(columns)
    conn2.commit()
    # –î–ª—è –ø–∞—à–∏!!!
    # cursor = conn.cursor()
    # for user_id in range(1, 113):
    #     cursor.execute('''
    #     INSERT INTO referrals (user_id, referrer_id, earnings)
    #     VALUES (?, ?, ?)
    #     ''', (user_id, 1022037499, 0.01))

    # # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    # conn.commit()
    # conn.close()

    referrer_id = None
    if len(message.text.split()) > 1:

        referrer_id = int(message.text.split()[1])
        print(referrer_id)

    print(referrer_id)
    cursor.execute('INSERT OR IGNORE INTO users (user_id, score, created_accounts) VALUES (?, 0, 0)', (message.from_user.id,))

    if referrer_id != message.from_user.id:
        cursor.execute('INSERT OR IGNORE INTO referrals (user_id, referrer_id, earnings) VALUES (?, ?, 0.0)', (message.from_user.id, referrer_id))
        cursor.execute('UPDATE referrals SET earnings = earnings + ? WHERE user_id = ? AND referrer_id = ?', (REFERRAL_BONUS, message.from_user.id, referrer_id))
        cursor.execute('INSERT OR IGNORE INTO balances (user_id, balance) VALUES (?, 0.0)', (referrer_id,))
        cursor.execute('UPDATE balances SET balance = balance + ? WHERE user_id = ?', (REFERRAL_BONUS, referrer_id))
    
    conn.commit()

    await message.answer(
        f'üëã –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ! \n\n üí∞–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã Gmail –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ —ç—Ç–æ –æ–ø–ª–∞—Ç—É. –ó–∞ –∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: {ACCRUAL}$\n\n ü§©–í—Å–µ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ. –ë–æ—Ç –≤—ã–¥–∞–µ—Ç –≤–∞–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Gmail –∞–∫–∫–∞—É–Ω—Ç–∞, –≤—ã –∫–æ–ø–∏—Ä—É–µ—Ç–µ –∏—Ö –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å –≤ Google. –°–æ–∑–¥–∞–µ—Ç–µ —Ç–∞–º –∞–∫–∫–∞—É–Ω—Ç Gmail, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ—Å—å –≤ –±–æ—Ç–∞. \n\nüìß–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –≤ –±–æ—Ç–µ USD - –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä, –æ–¥–Ω–∞–∫–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ {len(currencies)} –≤–∞–ª—é—Ç, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. üíµ\n\n‚ùó–í—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–º–∏ –≤–∞–ª—é—Ç–∞ –≤–ª–∏—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—ë –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n‚ùì–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´‚ùì –ü–æ–º–æ—â—å/–ñ–∞–ª–æ–±—ã¬ª –∏ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å.', 
        reply_markup=keyboard
    )

@dp.message(F.text == '‚ùì –ü–æ–º–æ—â—å/–ñ–∞–ª–æ–±—ã')
async def help_complaint(message: types.Message):
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üìß –∏–ª–∏ —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–π –≤–æ–ø—Ä–æ—Å ‚ùì", reply_markup=help_keyboard)

@dp.message(F.text == '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã')
async def help_quesions(message: types.Message):
    await message.answer(
        'üïê –ß—Ç–æ —Ç–∞–∫–æ–µ —Ö–æ–ª–¥?\n\n'
        '"–•–æ–ª–¥" - —ç—Ç–æ 5-–¥–Ω–µ–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ "–æ—Ç–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è" –∞–∫–∫–∞—É–Ω—Ç Gmail. –î–µ–ª–æ –≤ —Ç–æ–º, —á—Ç–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –¥–Ω–µ–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞, Google –º–æ–∂–µ—Ç –µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å. –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ "–æ—Ç–ª–µ–∂–∫–∏", –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ "–ë–∞–ª–∞–Ω—Å".\n\n'
        '‚ôæ –°–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –±–æ—Ç?\n\n'
        '–ë–æ—Ç –ø—Ä–∏–º–µ—Ç –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å. –ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã Google –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∏—Ö –≤ –ø–µ—Ä–∏–æ–¥ 5-–¥–Ω–µ–≤–Ω–æ–≥–æ —Ö–æ–ª–¥–∞.\n\n'
        'üë§ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞?\n\n'
        '–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–π–¥–µ—Ç –≤ –±–æ—Ç–∞ –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.\n\n'
        '–ö–∞–∂–¥—ã–π Gmail –∞–∫–∫–∞—É–Ω—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º, –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏–µ, –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ Gmail –∞–∫–∫–∞—É–Ω—Ç –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç.\n\n'
        '–í—ã –º–æ–∂–µ—Ç–µ –∏–º–µ—Ç—å –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.',
        reply_markup=help_keyboard
    )

@dp.message(F.text == '‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
async def help_write(message: types.Message, state: FSMContext):
    await state.set_state(HelpComplaintState.awaiting_message)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

@dp.message(HelpComplaintState.awaiting_message, F.content_type == 'text')
async def receive_help_complaint(message: types.Message, state: FSMContext):
    await state.update_data(user_message=message.text, user_id=message.from_user.id)
    await state.set_state(HelpComplaintState.awaiting_image)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ. –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ /skip.")

@dp.message(HelpComplaintState.awaiting_image, F.content_type == 'photo')
async def receive_image(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_message = data.get('user_message')
    user_id = data.get('user_id')
    admin_chat_id = CHECK_CHAT_ID_HELP

    photo = message.photo[-1]
    photo_file_id = photo.file_id

    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply|{user_id}")]
    ])

    await bot.send_photo(admin_chat_id, photo_file_id, caption=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message}", reply_markup=inline_kb)
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    await state.clear()

@dp.message(HelpComplaintState.awaiting_image, F.content_type == 'text', F.text.lower() == '/skip')
async def skip_image(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_message = data.get('user_message')
    user_id = data.get('user_id')
    admin_chat_id = CHECK_CHAT_ID_HELP

    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply|{user_id}")]
    ])

    await bot.send_message(admin_chat_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message}", reply_markup=inline_kb)
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    await state.clear()

@dp.callback_query(lambda c: c.data and c.data.startswith('reply|'))
async def ask_admin_for_reply(callback_query: types.CallbackQuery, state: FSMContext):
    _, user_id = callback_query.data.split('|')
    user_id = int(user_id)

    await state.update_data(reply_to_user_id=user_id)
    await state.set_state(AdminReplyState.awaiting_reply)
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    await callback_query.answer()

@dp.message(AdminReplyState.awaiting_reply)
async def send_admin_reply(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        user_id = data.get('reply_to_user_id')
        admin_reply = message.text

        await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_reply}")
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å')
async def send_credentials(message: types.Message):
    try:
        first_names = french_first_names + english_first_names + russian_first_names
        last_names = french_last_names + english_last_names + russian_last_names
        

        your_first_name = random.choice(first_names)
        your_last_name = random.choice(last_names)

        random_number = random.randint(1000, 9999)

        your_first_name_normalized = unidecode(your_first_name).lower()
        your_last_name_normalized = unidecode(your_last_name).lower()

        your_username = f"{your_first_name_normalized}.{your_last_name_normalized}{random_number}"

        login = your_username

        def generate_random_password(length=12):
            chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()"
            password = ''.join(random.choice(chars) for _ in range(length))
            return password

        password = generate_random_password()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        cursor.execute('INSERT INTO temp_check (user_id, login, password) VALUES (?, ?, ?)', (message.from_user.id, login, password))
        temp_id = cursor.lastrowid
        conn.commit()

        # –°–æ–∑–¥–∞–µ–º Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ì–æ—Ç–æ–≤–æ" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"check|{temp_id}"), 
             InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data=f"cancel|{temp_id}")]
        ])

        await message.answer(f"üÜî –õ–æ–≥–∏–Ω: `{login}`@gmail.com\nüîë –ü–∞—Ä–æ–ª—å: `{password}`\n–ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {ACCRUAL}$", reply_markup=inline_kb, parse_mode="MARKDOWN")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(lambda c: c.data and c.data.startswith('cancel|'))
async def process_cancel_registration(callback_query: types.CallbackQuery):
    _, temp_id = callback_query.data.split('|')
    temp_id = int(temp_id)

    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute('DELETE FROM temp_check WHERE id = ?', (temp_id,))
    conn.commit()

    await callback_query.message.delete()
    await callback_query.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.")
    await callback_query.answer()

@dp.message(F.text == 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã')
async def referral_link(message: types.Message):
    user_id = message.from_user.id
    referral_code = f"{user_id}"
    referral_url = f"https://t.me/GoogleCoinUpbot?start={referral_code}"
    
    # Fetch the number of referrals and earnings from the database
    cursor.execute("SELECT COUNT(*), SUM(earnings) FROM referrals WHERE referrer_id=?", (user_id,))
    referrals_count, total_earnings = cursor.fetchone()
    total_earnings = total_earnings or 0  # Handle None case

    response_message = (
        f"üë• <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n"
        f"<code>{referral_url}</code>\n\n"
        f"üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {referrals_count}\n"
        f"üíµ <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö:</b> ${total_earnings:.2f}\n\n"
        f"üîπ <b>–ü–ª–∞—Ç–∏—Ç—Å—è –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:</b> ${REFERRAL_BONUS:.2f}\n"
        # f"üîπ <b>–ü—Ä–æ—Ü–µ–Ω—Ç —Å –≤—ã–≤–æ–¥–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:</b> {WITHDRAWAL_PERCENTAGE * 100}%\n"
    )

    await message.answer(response_message, parse_mode='HTML')

@dp.message(F.text == 'üìú –ê–∫–∫–∞—É–Ω—Ç—ã')
async def show_accounts(message: types.Message):
    try:
        cursor.execute('SELECT created_accounts FROM users WHERE user_id = ?', (message.from_user.id,))
        user_data = cursor.fetchone()

        if user_data:
            await message.answer(f"–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {user_data[0]}")
        else:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == 'üíµ –ë–∞–ª–∞–Ω—Å')
async def show_balance(message: types.Message):
    try:
        cursor.execute('SELECT balance, hold_balance FROM balances WHERE user_id = ?', (message.from_user.id,))
        user_balance = cursor.fetchone()
        
        cursor.execute('SELECT currency FROM user_currency WHERE user_id = ?', (message.from_user.id,))
        user_currency_data = cursor.fetchone()
        user_currency = user_currency_data[0] if user_currency_data else 'USD'

        if user_balance:
            balance = math.floor(user_balance[0] * 1000) / 1000
            hold_balance = math.floor(user_balance[1] * 1000) / 1000
            if user_currency != 'USD':
                rate = await get_exchange_rate('USD', user_currency)
                balance_in_currency = math.floor((balance * rate)*1000)/1000
                hold_balance_in_currency = math.floor((hold_balance * rate)*1000)/1000
                await message.answer(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance} / {balance_in_currency} {user_currency}\n–ë–∞–ª–∞–Ω—Å –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏: ${hold_balance} / {hold_balance_in_currency} {user_currency}")
            else:
                await message.answer(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance}\n–ë–∞–ª–∞–Ω—Å –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏: ${hold_balance}")
        else:
            await message.answer("–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: $0\n–ë–∞–ª–∞–Ω—Å –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏: $0")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == 'üåê –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã')
async def select_currency(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", reply_markup=currency_keyboard)

@dp.message(lambda message: message.text in currencies)
async def set_currency(message: types.Message):
    selected_currency = message.text
    cursor.execute('INSERT OR REPLACE INTO user_currency (user_id, currency) VALUES (?, ?)', (message.from_user.id, selected_currency))
    conn.commit()
    await message.answer(f"–í–∞–ª—é—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {selected_currency}.", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data and c.data.startswith('check'))
async def process_check(callback_query: types.CallbackQuery):
    try:
        data = callback_query.data.split('|')
        temp_id = int(data[1])

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute('SELECT login, password FROM temp_check WHERE id = ?', (temp_id,))
        temp_data = cursor.fetchone()

        if temp_data:
            login, password = temp_data
            inline_kb_check = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–†–∞–±–æ—á–∏–π", callback_data=f"result|{temp_id}|working"), 
                 InlineKeyboardButton(text="–ù–µ —Ä–∞–±–æ—á–∏–π", callback_data=f"result|{temp_id}|not_working")]
            ])

            # –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ hold –±–∞–ª–∞–Ω—Å
            cursor.execute('INSERT OR IGNORE INTO balances (user_id, balance, hold_balance) VALUES (?, 0, 0)', (callback_query.from_user.id,))
            cursor.execute(f'UPDATE balances SET hold_balance = hold_balance + {ACCRUAL} WHERE user_id = ?', (callback_query.from_user.id,))
            conn.commit()

            await callback_query.answer()
            await bot.send_message(CHECK_CHAT_ID, f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è:\n–õ–æ–≥–∏–Ω: {login}\n–ü–∞—Ä–æ–ª—å: {password}", reply_markup=inline_kb_check)
            await callback_query.message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        else:
            await callback_query.message.answer("–û—à–∏–±–∫–∞: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@dp.callback_query(lambda c: c.data and c.data.startswith('result'))
async def process_result(callback_query: types.CallbackQuery, ):
    try:
        data = callback_query.data.split('|')
        temp_id = int(data[1])
        result = data[2]
        result_text = "–†–∞–±–æ—á–∏–π" if result == "working" else "–ù–µ —Ä–∞–±–æ—á–∏–π"

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute('SELECT user_id, login, password FROM temp_check WHERE id = ?', (temp_id,))
        temp_data = cursor.fetchone()
            
        if temp_data:
            sender_id, login, password = temp_data
            login_gm = temp_data[1]
            login = temp_data[0]

            if result == "working":
                cursor.execute(f'UPDATE balances SET balance = balance + {ACCRUAL} WHERE user_id = ?', (callback_query.from_user.id,))
                conn.commit()
                await bot.send_message(login,f"üéâ –õ–æ–≥–∏–Ω: {login_gm} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {ACCRUAL}$. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —Ä–∞–±–æ—Ç—É! üí∏")


                # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å hold –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å
                cursor.execute(f'UPDATE balances SET hold_balance = hold_balance - {ACCRUAL}, balance = balance + {ACCRUAL} WHERE user_id = ?', (sender_id,))
                conn.commit()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'working'
                logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ {login} –∏ –ø–∞—Ä–æ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                cursor.execute('INSERT INTO credentials (user_id, login, password, status) VALUES (?, ?, ?, ?)', (sender_id, login_gm, password, 'working'))
                conn.commit()

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–∞–ª–ª–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('SELECT score, created_accounts FROM users WHERE user_id = ?', (sender_id,))
                user = cursor.fetchone()
                if user:
                    new_score = user[0] + 1
                    new_created_accounts = user[1] + 1
                    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_id} –¥–æ {new_score} –∏ {new_created_accounts}")
                    cursor.execute('UPDATE users SET score = ?, created_accounts = ? WHERE user_id = ?', (new_score, new_created_accounts, sender_id))
                else:
                    logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_id}")
                    cursor.execute('INSERT INTO users (user_id, score, created_accounts) VALUES (?, ?, ?)', (sender_id, 1, 1))
                conn.commit()


                # print("–û—Ç–∫—Ä—ã–ª–∏ –±–∞–∑—É")
                # cursor2.execute('''
                # INSERT INTO accounts (email, password, is_channel) VALUES (?, ?, ?)
                # ''', (login_gm, password, 0))
                # print("–ó–∞–ø–∏—Å–∞–ª–∏ –≤ –±–∞–∑—É")
                
                # conn2.commit()
                # conn2.close()
            else:
                await bot.send_message(login,f"–ê–∫–∫–∞—É–Ω—Ç {login_gm} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            await callback_query.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {result_text}")

            # # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            # cursor.execute('DELETE FROM temp_check WHERE id = ?', (temp_id,))
            # conn.commit()

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        else:
            await callback_query.message.answer("–û—à–∏–±–∫–∞: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

@dp.message(F.text == 'üí∏ –í—ã–≤–µ—Å—Ç–∏')
async def withdraw_request(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:", reply_markup=withdraw_keyboard)

@dp.message(F.text == 'üîô –ù–∞–∑–∞–¥')
async def back_to_main_menu(message: types.Message):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)

@dp.message(F.text == 'üÖøÔ∏è Payeer')
async def select_payeer(message: types.Message, state: FSMContext):
    cursor.execute('SELECT balance FROM balances WHERE user_id = ?', (message.from_user.id,))
    user_balance = cursor.fetchone()

    if user_balance and user_balance[0] >= MIN_FOR_CONCLUSION:
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${MIN_FOR_CONCLUSION}):")
        await state.set_state(WithdrawState.awaiting_withdraw_amount)
    else:
        await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ Payeer wallet: ${MIN_FOR_CONCLUSION}")

@dp.message(WithdrawState.awaiting_withdraw_amount)
async def process_withdraw_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)

        if amount < MIN_FOR_CONCLUSION:
            await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${MIN_FOR_CONCLUSION}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            commission = amount * 0.2
            amount_after_commission = amount - commission
            await state.update_data(amount=amount, amount_after_commission=amount_after_commission)
            await message.answer(f"–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 20%.\n–°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏: ${amount_after_commission:.2f}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ Payeer (–Ω–∞–ø—Ä–∏–º–µ—Ä, P12345678):")
            await state.set_state(WithdrawState.awaiting_wallet_number)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É.")

@dp.message(WithdrawState.awaiting_wallet_number)
async def process_wallet_number(message: types.Message, state: FSMContext):
    wallet_number = message.text
    if not is_valid_payeer_wallet(wallet_number):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, P12345678):")
        return

    data = await state.get_data()
    amount = data.get("amount")
    amount_after_commission = data.get("amount_after_commission")

    try:
        cursor.execute('SELECT balance FROM balances WHERE user_id = ?', (message.from_user.id,))
        user_balance = cursor.fetchone()

        if user_balance and user_balance[0] >= amount:
            inline_kb_confirm = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í—ã–≤–µ–ª", callback_data=f"withdraw_done|{message.from_user.id}|{amount}|{amount_after_commission}")],
                [InlineKeyboardButton(text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏", callback_data=f"withdraw_failed|{message.from_user.id}|{amount}")]
            ])
            await bot.send_message(CHECK_CHAT_ID, f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {message.from_user.id}\n–°—É–º–º–∞: ${amount}\n–°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏: ${amount_after_commission:.2f}\n–ö–æ—à–µ–ª–µ–∫ üÖøÔ∏èPayeer: {wallet_number}", reply_markup=inline_kb_confirm)
            await message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
            # #–í—ã–ø–ª–∞—Ç–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
            # cursor.execute('SELECT referrer_id FROM referrals WHERE user_id = ?', (message.from_user.id,))
            # referrer = cursor.fetchone()
            # if referrer:
            #     referrer_id = referrer[0]
            #     referral_bonus = amount * WITHDRAWAL_PERCENTAGE
            #     cursor.execute('UPDATE balances SET balance = balance + ? WHERE user_id = ?', (referral_bonus, referrer_id))
            #     conn.commit()

            #     # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            #     try:
            #         await bot.send_message(referrer_id, f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ {referral_bonus:.2f} USD –æ—Ç –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.")
            #     except Exception as e:
            #         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}")
            
        else:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")

        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()

@dp.callback_query(lambda c: c.data and c.data.startswith('withdraw_done'))
async def process_withdraw_done(callback_query: types.CallbackQuery):
    try:
        data = callback_query.data.split('|')
        user_id = int(data[1])
        amount = float(data[2])
        amount_after_commission = float(data[3])

        cursor.execute('SELECT balance FROM balances WHERE user_id = ?', (user_id,))
        user_balance = cursor.fetchone()
        if user_balance and user_balance[0] >= amount:
            cursor.execute('UPDATE balances SET balance = balance - ? WHERE user_id = ?', (amount, user_id))
            conn.commit()
            await callback_query.answer("–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
            await bot.send_message(user_id, f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ${amount} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ù–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${amount_after_commission:.2f}.")

        else:
            await callback_query.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(lambda c: c.data and c.data.startswith('withdraw_failed'))
async def process_withdraw_failed(callback_query: types.CallbackQuery):
    try:
        data = callback_query.data.split('|')
        user_id = int(data[1])
        amount = float(data[2])

        await callback_query.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.")
        await bot.send_message(user_id, f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ${amount} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–∞–∑–∞ –≤ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–∞–∑–∞ –≤ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")